SafroleModule DEFINITIONS ::= BEGIN

-- Define basic types
u8 ::= INTEGER (0..255)
u32 ::= INTEGER (0..4294967295)

-- Define constants
validators_count INTEGER ::= 6
epoch_length INTEGER ::= 12

-- Define fixed-length arrays
ByteArray32 ::= SEQUENCE (SIZE(32)) OF u8
OpaqueHash ::= ByteArray32
Ed25519Key ::= ByteArray32
BandersnatchKey ::= ByteArray32
EpochKeys ::= SEQUENCE (SIZE(epoch_length)) OF BandersnatchKey
TicketsBodies ::= SEQUENCE (SIZE(epoch_length)) OF TicketBody

-- Define enumerations
TicketsOrKeys ::= ENUMERATED {
    tickets (0),
    keys (1)
}

-- Define structures
TicketBody ::= SEQUENCE {
    id OpaqueHash,
    attempt u8
}

ValidatorData ::= SEQUENCE {
    ed25519 Ed25519Key,
    bandersnatch BandersnatchKey,
    metadata SEQUENCE (SIZE(64)) OF u8
}

ValidatorsData ::= SEQUENCE (SIZE(validators_count)) OF ValidatorData

TicketEnvelope ::= SEQUENCE {
    attempt u8,
    signature SEQUENCE (SIZE(784)) OF u8
}

EpochMark ::= SEQUENCE {
    entropy OpaqueHash,
    validators SEQUENCE (SIZE(validators_count)) OF BandersnatchKey
}

TicketsMark ::= SEQUENCE (SIZE(epoch_length)) OF TicketBody

OutputMarks ::= SEQUENCE {
    epoch_mark [0] EpochMark OPTIONAL,
    tickets_mark [1] TicketsMark OPTIONAL
}

SafroleState ::= SEQUENCE {
    timeslot u32,
    entropy SEQUENCE (SIZE(4)) OF OpaqueHash,
    prev_validators ValidatorsData,
    curr_validators ValidatorsData,
    next_validators ValidatorsData,
    designed_validators ValidatorsData,
    tickets_accumulator SEQUENCE (SIZE(0..epoch_length)) OF TicketBody,
    tickets_or_keys TicketsOrKeys,
    tickets_verifier_key SEQUENCE (SIZE(384)) OF u8
}

SafroleInput ::= SEQUENCE {
    slot u32,
    entropy OpaqueHash,
    extrinsics SEQUENCE (SIZE(0..16)) OF TicketEnvelope
}

SafroleOutput ::= CHOICE {
    ok OutputMarks,
    err u8
}

ExecDump ::= SEQUENCE {
    input SafroleInput,
    pre_state SafroleState,
    output SafroleOutput,
    post_state SafroleState
}

END
